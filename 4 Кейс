	
Кейс-задача 4.
Разработка простой программы для сортировки данных
 
- Напишите программу на выбранном вами языке программирования, которая сортирует массив чисел в порядке возрастания;
- Реализуйте выбранный алгоритм сортировки, например, сортировку пузырьком, сортировку выбором или сортировку вставками;
- Реализуйте функцию для генерации случайного массива чисел;
- Выведите исходный массив перед сортировкой и отсортированный массив после выполнения сортировки;
- Расширьте программу, чтобы она могла обрабатывать массивы различных размеров и повторяйте шаги 3-4 для нескольких наборов данных.



Программа на Python, реализующей сортировку массива чисел в порядке возрастания с использованием сортировки пузырьком:
 
import random
 
def bubble_sort(arr):
   """Сортировка пузырьком."""
   n = len(arr)
   for i in range(n):
       for j in range(0, n - i - 1):
           if arr[j] > arr[j + 1]:
               arr[j], arr[j + 1] = arr[j + 1], arr[j]
   return arr
 
def generate_random_array(size, min_value, max_value):
   """Генерация случайного массива чисел."""
   return [random.randint(min_value, max_value) for _ in range(size)]
 
def main():
   print("Программа для сортировки массива чисел\n")
   
   while True:
       try:
           size = int(input("Введите размер массива: "))
           min_value = int(input("Введите минимальное значение элементов: "))
           max_value = int(input("Введите максимальное значение элементов: "))
 
           if size <= 0 or min_value > max_value:
               print("Некорректные значения! Попробуйте снова.")
               continue
 
           # Генерация случайного массива
           array = generate_random_array(size, min_value, max_value)
           print("\nСгенерированный массив:")
           print(array)
 
           # Сортировка массива
           sorted_array = bubble_sort(array[:])  # Создаем копию для сортировки
           print("\nОтсортированный массив:")
           print(sorted_array)
 
           # Повторение для других массивов
           repeat = input("\nХотите повторить? (да/нет): ").strip().lower()
           if repeat != "да":
               print("Программа завершена.")
               break
       except ValueError:
           print("Введите корректные числовые значения!")
 
if __name__ == "__main__":
   main()
 
 
 
1. Алгоритм сортировки пузырьком:
⎯ На каждом проходе сравниваются соседние элементы, и больший элемент перемещается вправо.
⎯ Повторяется до тех пор, пока массив не будет отсортирован.
2. Генерация массива:
⎯ Случайный массив создается с помощью функции random.randint().
3. Интерактивный интерфейс:
⎯ Пользователь вводит размер массива, минимальное и максимальное значения.
⎯ Программа генерирует массив, сортирует его и выводит оба массива.
4. Повторный запуск:
⎯ Пользователь может повторить выполнение программы с новыми параметрами.
Ввод:
Введите размер массива: 10
Введите минимальное значение элементов: 1
Введите максимальное значение элементов: 100
 
 
Вывод:
Сгенерированный массив:
[87, 12, 45, 67, 89, 34, 23, 78, 56, 9]
 
Отсортированный массив:
[9, 12, 23, 34, 45, 56, 67, 78, 87, 89]
 
Расширение программы
Для обработки нескольких массивов:

⎯ Генерация массивов разных размеров.
⎯ Добавление других алгоритмов сортировки (например, выбором или вставками).
⎯ Сравнение производительности разных алгоритмов.
 
 
